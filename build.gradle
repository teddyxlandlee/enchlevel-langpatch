buildscript {
    repositories {
        maven {
            name = 'Aliyun Mirror'
            url  = 'https://maven.aliyun.com/repository/public'
        }
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.ow2.asm:asm:9.3")
    }
}

plugins {
    //id 'fabric-loom' version '0.7.34'
    id 'maven-publish'
    id 'java'
    id 'idea'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
    id 'xland.gradle.forge-init-injector' version '1.1.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
group = project.maven_group
version = project.mod_version

allprojects {
    repositories {
        mavenLocal()
        maven {
            name = 'Aliyun Mirror'
            url  = 'https://maven.aliyun.com/repository/public'
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'Lss233 Mirror'
            url  = 'https://lss233.littleservice.cn/repositories/minecraft'
        }
        maven {
            name = '7c7maven'
            // Formerly COVID-Trump
            url = 'https://mvn.7c7.icu'
        }
        maven {
            name = "TerraformersMC"
            url  = 'https://maven.terraformersmc.com/releases/'
        }
    }
}

dependencies {
    implementation "net.fabricmc:fabric-loader:${project.loader_version}"
    implementation 'com.google.guava:guava:21.0'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'it.unimi.dsi:fastutil:8.2.1'
    implementation 'net.fabricmc:sponge-mixin:0.11.4+mixin.0.8.5'
    implementation 'org.apache.logging.log4j:log4j-api:2.8.1'
    // The maximum version which is compatible with Java 8.
    // Use it to load mod translations.

    compileOnly 'org.apiguardian:apiguardian-api:1.1.2'
    //compileOnly project(':compile-lib')
    compileOnly 'org.jetbrains:annotations:19.0.0'
    testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.20.0'
    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    //modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
}

forgeInitInjector {
    modId = 'enchlevellangpatch'
    stubPackage = 'g4QNAmBS\$BFhdWlbozC0\$'
    setClientEntrypoint 'xland/mcmod/enchlevellangpatch/impl/LangPatchImpl'
    neoFlag 'pre_20_5', 'post_20_5'
}

processResources {
    inputs.property "version", project.version

    /*from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }*/
    filesMatching(['fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml']) {
        expand 'version' : project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile.class).configureEach {
    it.options.encoding = "UTF-8"

    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible())
        it.options.release.set targetVersion
}

java {
    withSourcesJar()
    //withJavadocJar()
}

javadoc {
    failOnError false
    options {
        locale 'en_US'
        encoding 'UTF-8'
        charSet 'UTF-8'
        links(
                'https://docs.oracle.com/javase/8/docs/api/',
                'https://javadoc.io/doc/com.google.guava/guava/21.0/',
                'https://javadoc.io/doc/org.jetbrains/annotations/19.0.0/',
                'https://javadoc.io/doc/org.apiguardian/apiguardian-api/1.1.2/',
        )
    }
}

jar {
    from ("LICENSE") {
        rename {  "META-INF/${it}_${project.archivesBaseName}"  }
    }
    manifest {
        attributes([
                "Specification-Title"     : "Enchantment Level Language Patch",
                "Specification-Vendor"    : "teddyxlandlee",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "teddyxlandlee",
                "Implementation-Timestamp": Instant.now(),
                "MixinConfigs" : "ellp.mixins-forge.json",  // for FML
        ])
    }
}

import me.modmuss50.mpp.ReleaseType

def javaVersions(int from, int to) {
	List<JavaVersion> list = []
	for (int i = from; i <= to; i++) {
		list.add(JavaVersion.toVersion(i))
	}
	return list
}

publishMods {
	file = jar.archiveFile
	["fabric", "forge", "neoforge", "quilt"].each { ml ->
		modLoaders.add(ml)
	}
	type = ReleaseType.of(project.release_type)
	changelog = project.changelog
	displayName = "[1.16+/ALL] LangPatch ${project.version}"

	curseforge {
		projectId = "529854"
		minecraftVersionRange {
			start = "1.16"
			end = "latest"
		}
		javaVersions(8, 22).each { jv ->
			javaVersions.add(jv)
		}
		clientRequired = true
		serverRequired = false
		accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
	}

	modrinth {
		projectId = "Lf4kDKU9"
		minecraftVersionRange {
			start = "1.16"
			end = "latest"
			includeSnapshots = true
		}
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
	}
}

// configure the maven publication
publishing {
    publications {
        create('mavenJava', MavenPublication.class) {
            // add all the jars that should be included when publishing to maven
            artifact(jar) {
                builtBy jar
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}
