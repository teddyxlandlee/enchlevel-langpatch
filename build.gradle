import org.objectweb.asm.ClassWriter
import org.objectweb.asm.Opcodes

buildscript {
    repositories {
        maven {
            name = 'Aliyun Mirror'
            url  = 'https://maven.aliyun.com/repository/public'
        }
    }
    dependencies {
        classpath("org.ow2.asm:asm:9.3")
    }
}

plugins {
    id 'fabric-loom' version '0.7.34'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

allprojects {
    repositories {
        mavenLocal()
        maven {
            name = 'Aliyun Mirror'
            url  = 'https://maven.aliyun.com/repository/public'
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'Lss233 Mirror'
            url  = 'https://lss233.littleservice.cn/repositories/minecraft'
        }
        maven {
            name = 'COVID-Trump'
            url = 'https://covid-trump.github.io/mvn/'
        }
        maven {
            name = "TerraformersMC"
            url  = 'https://maven.terraformersmc.com/releases/'
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // The maximum version which is compatible with Java 8.
    // Use it to load mod translations.
    //include
    modRuntime("net.fabricmc.fabric-api:fabric-resource-loader-v0:0.4.8+3cc0f0907d")

    compileOnly 'org.apiguardian:apiguardian-api:1.1.2'
    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    //modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
}

task generateModClass {
    new File(processResources.destinationDir, "\$e4065c6641c74ce08038e013d8a7a99e").deleteDir()
    def fileUuid = "\$e4065c6641c74ce08038e013d8a7a99e/A"
    def fileUuid2 = "\$e4065c6641c74ce08038e013d8a7a99e/B"
    def modId = "enchlevellangpatch"
    def mainClass = 'xland/mcmod/enchlevellangpatch/impl/LangPatchImpl'
    def file = new File(processResources.destinationDir, "${fileUuid}.class")
    afterEvaluate {
        file.parentFile.mkdirs()
        if (file.exists()) file.delete()
        file.createNewFile()
        def writer = new ClassWriter(3)
        writer.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, fileUuid, null,
                "java/lang/Object", null)
        def m = writer.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null)
        m.visitVarInsn(Opcodes.ALOAD, 0)
        m.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false)
        m.visitInsn(Opcodes.RETURN)
        m.visitMaxs(-1, -1)

        writer.visitAnnotation("Lnet/minecraftforge/fml/common/Mod;", true).visit("value", modId)
        writer.visitSource(null, "ASM Generated")

        writer.visitAnnotation("Lnet/minecraftforge/api/distmarker/OnlyIn;", true)
                .visitEnum("value", "Lnet/minecraftforge/api/distmarker/Dist;", "CLIENT")

        def a = file.newOutputStream()
        a.write(writer.toByteArray())
        a.close()

        def file2 = new File(processResources.destinationDir, "${fileUuid2}.class")
        if (file2.exists()) file2.delete()
        file2.createNewFile()
        writer = new ClassWriter(3)
        writer.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, fileUuid2, null,
                "java/lang/Object", new String[]{"java/lang/Runnable"})
        m = writer.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null)
        m.visitVarInsn(Opcodes.ALOAD, 0)
        m.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false)
        m.visitInsn(Opcodes.RETURN)
        m.visitMaxs(-1, -1)
        m = writer.visitMethod(Opcodes.ACC_PUBLIC, "run", "()V", null, null)
        m.visitMethodInsn(Opcodes.INVOKESTATIC, mainClass, "init", "()V", false)
        m.visitInsn(Opcodes.RETURN)
        m.visitMaxs(-1, -1)
        m = writer.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, "CLIENT", "(Lnet/minecraftforge/fml/event/lifecycle/FMLClientSetupEvent;)V",
                null, null)
        m.visitAnnotation("Lnet/minecraftforge/eventbus/api/SubscribeEvent;", true)
        m.visitVarInsn(Opcodes.ALOAD, 0)
        m.visitTypeInsn(Opcodes.NEW, fileUuid2)
        m.visitInsn(Opcodes.DUP)
        m.visitMethodInsn(Opcodes.INVOKESPECIAL, fileUuid2, "<init>", "()V", false)
        m.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "net/minecraftforge/fml/event/lifecycle/FMLClientSetupEvent",
                "enqueueWork", "(Ljava/lang/Runnable;)Ljava/util/concurrent/CompletableFuture;")
        m.visitInsn(Opcodes.RETURN)
        m.visitMaxs(-1, -1)
        writer.visitSource(null, "ASM Generated")
        def ann = writer.visitAnnotation("Lnet/minecraftforge/fml/common/Mod\$EventBusSubscriber;", true)
        ann.visit("modid", modId)
        ann.visitEnum("bus", "Lnet/minecraftforge/fml/common/Mod\$EventBusSubscriber\$Bus;",
                "MOD")
        def ann2 = ann.visitArray("value")
        ann2.visitEnum(null, "Lnet/minecraftforge/api/distmarker/Dist;", "CLIENT")
        ann2.visitEnd()
        ann.visitEnd()
        a = file2.newOutputStream()
        a.write(writer.toByteArray())
        a.close()
    }
}

processResources {
    dependsOn generateModClass
    inputs.property "version", project.version

    /*from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }*/
    filesMatching(['fabric.mod.json', 'mods.toml']) {
        expand 'version' : project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile.class).configureEach {
    it.options.encoding = "UTF-8"

    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible())
        it.options.release = targetVersion
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.

java {
    withSourcesJar()
    //withJavadocJar()
}

jar {
    from ("LICENSE") {
        rename {  "${it}_${project.archivesBaseName}"  }
    }
    manifest {
        attributes([
                "Specification-Title"     : "Enchantment Level Language Patch",
                "Specification-Vendor"    : "teddyxlandlee",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "teddyxlandlee",
                "Implementation-Timestamp": Instant.now(),
                "MixinConfigs" : "enchlevel-langpatch.mixins.json"
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            //artifact(javadocJar) {
            //    builtBy javadoc
            //}
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}
